<!DOCTYPE html>
<html>
  <head>
    <title><%- title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `link` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' boilerplate asset management.

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically.  Both CSS (.css) and LESS (.less) are supported.
        In production, your styles will be minified and concatenated into a single file.

        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/linker/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/linker/styles/pick-a-color-1.2.3.min.css">
    <link rel="stylesheet" href="/linker/styles/styles.css">
    <!--STYLES END-->
  </head>

  <body>

    <div class="navbar navbar-inverse navbar-fixed-top" role="navigation">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="/">Moods</a>
        </div>
        <div class="collapse navbar-collapse">
          <ul class="nav navbar-nav">

            <% if (session.authenticated) { %>
              <li><a href="/mood/list">Moods</a></li>
            <% } %>

            <% if (session.authenticated) { %>
              <li><a href="/session/destroy">Logout</a></li>
            <% } else { %>
              <li><a href="/session/create">Login</a></li>
            <% } %>

            <li><a href="/user/create">Register</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </div>

    <div class="container">

      <% if(flash && flash.err) { %>
        <ul class="alert alert-danger alert-dismissable">
          <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
          <% Object.keys(flash.err).forEach(function(error) { %>
            <li><%- flash.err[error] %></li>
          <% }) %>
        </ul>
      <% } %>

      <%- body %>

    </div><!-- /.container -->

    <!--
        Client-side Templates
        ========================

    		HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically.

        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your templates using a server-side stringfile
              before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' boilerplate asset management.

      By default, filesin your `assets/linker/js` folder are included here
      automatically.  Both JavaScript (.js) and CoffeeScript (.coffee) are supported.
      In production, your scripts will be minified and concatenated into a single file.

      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/linker/js/jquery.min.js"></script>
    <script src="/linker/js/underscore.min.js"></script>
    <script src="/linker/js/bootstrap.min.js"></script>
    <script src="/linker/js/pick-a-color-1.2.3.min.js"></script>
    <script src="/linker/js/tinycolor-0.9.15.min.js"></script>
    <!--SCRIPTS END-->

    <script>  
      $( document ).ready(function() {
          $(".pick-a-color").pickAColor();
      });
    </script>

  </body>
</html>
